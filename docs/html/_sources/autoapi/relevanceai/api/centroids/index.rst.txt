:py:mod:`relevanceai.api.centroids`
===================================

.. py:module:: relevanceai.api.centroids


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   relevanceai.api.centroids.Centroids




.. py:class:: Centroids(project, api_key, base_url)

   Bases: :py:obj:`relevanceai.base.Base`

   Base class for all relevanceai utilities

   .. py:method:: list(self, dataset_id: str, vector_field: str, alias: str = 'default', page_size: int = 5, cursor: str = None, include_vector: bool = False, output_format: str = 'json', base_url='https://gateway-api-aueast.relevance.ai/latest')

      Retrieve the cluster centroid

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: string
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param page_size: Size of each page of results
      :type page_size: int
      :param cursor: Cursor to paginate the document retrieval
      :type cursor: string
      :param include_vector: Include vectors in the search results
      :type include_vector: bool


   .. py:method:: get(self, dataset_id: str, cluster_ids: list, vector_field: str, alias: str = 'default', page_size: int = 5, cursor: str = None, output_format: str = 'json')

      Retrieve the cluster centroids by IDs

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param cluster_ids: List of cluster IDs
      :type cluster_ids: list
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: string
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param page_size: Size of each page of results
      :type page_size: int
      :param cursor: Cursor to paginate the document retrieval
      :type cursor: string


   .. py:method:: insert(self, dataset_id: str, cluster_centers: dict, vector_field: str, alias: str = 'default', output_format: str = 'json')

      Insert your own cluster centroids for it to be used in approximate search settings and cluster aggregations.
      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param cluster_centers: Cluster centers with the key being the index number
      :type cluster_centers: list
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: string
      :param alias: Alias is used to name a cluster
      :type alias: string


   .. py:method:: documents(self, dataset_id: str, cluster_ids: list, vector_field: str, alias: str = 'default', page_size: int = 5, cursor: str = None, page: int = 1, include_vector: bool = False, similarity_metric: str = 'cosine', output_format: str = 'json')

      Retrieve the cluster centroids by IDs
      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param cluster_ids: List of cluster IDs
      :type cluster_ids: list
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: string
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param page_size: Size of each page of results
      :type page_size: int
      :param cursor: Cursor to paginate the document retrieval
      :type cursor: string
      :param page: Page of the results
      :type page: int
      :param include_vector: Include vectors in the search results
      :type include_vector: bool
      :param similarity_metric: Similarity Metric, choose from ['cosine', 'l1', 'l2', 'dp']
      :type similarity_metric: string



