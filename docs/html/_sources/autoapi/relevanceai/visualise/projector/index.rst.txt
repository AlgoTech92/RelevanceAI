:py:mod:`relevanceai.visualise.projector`
=========================================

.. py:module:: relevanceai.visualise.projector


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   relevanceai.visualise.projector.Projector




Attributes
~~~~~~~~~~

.. autoapisummary::

   relevanceai.visualise.projector.RELEVANCEAI_BLUE
   relevanceai.visualise.projector.MARKER_SIZE


.. py:data:: RELEVANCEAI_BLUE
   :annotation: = #1854FF

   

.. py:data:: MARKER_SIZE
   :annotation: = 5

   

.. py:class:: Projector(project, api_key)

   Bases: :py:obj:`relevanceai.api.client.BatchAPIClient`, :py:obj:`relevanceai.base.Base`, :py:obj:`doc_utils.DocUtils`

   Projector class.

   .. rubric:: Example

   >>> from relevanceai import Client
   >>> project = input()
   >>> api_key = input()
   >>> client = Client(project, api_key)
   >>> client.projector.plot(
           dataset_id, vector_field, number_of_points_to_render, random_state,
           dr, dr_args, dims,
           vector_label, vector_label_char_length,
           color_label, colour_label_char_length,
           hover_label,
           cluster, cluster_args,
           )

   .. py:method:: plot(self, dataset_id: str, vector_field: str, number_of_points_to_render: int = 1000, random_state: int = 0, dr: Union[relevanceai.vector_tools.constants.DIM_REDUCTION, relevanceai.vector_tools.dim_reduction.DimReductionBase] = 'pca', dr_args: Union[None, Dict] = None, dims: typing_extensions.Literal[2, 3] = 3, vector_label: Union[None, str] = None, vector_label_char_length: Union[None, int] = 50, colour_label: Union[None, str] = None, colour_label_char_length: Union[None, int] = 20, hover_label: List[str] = [], cluster: Union[relevanceai.vector_tools.constants.CLUSTER, relevanceai.vector_tools.cluster.ClusterBase] = None, cluster_args: Union[None, Dict] = None, num_clusters: Union[None, int] = 10, marker_colour: str = RELEVANCEAI_BLUE, marker_size: int = MARKER_SIZE)

      Plot function for Embedding Projector class

      To write your own custom dimensionality reduction, you should inherit from DimReductionBase:
      from relevanceai.visualise.dim_reduction import DimReductionBase
      class CustomDimReduction(DimReductionBase):
          def fit_transform(self, vectors):
              return np.arange(512, 2)

      .. rubric:: Example

      >>> from relevanceai import Client
      >>> project = input()
      >>> api_key = input()
      >>> client = Client(project, api_key)
      >>> client.projector.plot(
              dataset_id, vector_field, number_of_points_to_render, random_state,
              dr, dr_args, dims,
              vector_label, vector_label_char_length,
              color_label, colour_label_char_length,
              hover_label,
              cluster, cluster_args,
              )


   .. py:method:: plot_from_docs(self, docs: List[Dict[str, Any]], dims: int, marker_size: int, marker_colour: str, *args, **kwargs)


   .. py:method:: _get_vector_fields(self) -> List[str]

      Returns list of valid vector fields from dataset schema


   .. py:method:: _is_valid_vector_name(self, vector_name: str) -> bool

      Check vector field name is valid


   .. py:method:: _is_valid_label_name(self, label_name: str) -> bool

      Check vector label name is valid. Checks that it is either numeric or text


   .. py:method:: _remove_empty_vector_fields(self, vector_field: str) -> List[Dict]

      Remove documents with empty vector fields


   .. py:method:: _generate_fig(self, embedding_df: pandas.DataFrame, marker_size: int, marker_colour: str, legend: Union[None, str]) -> plotly.graph_objs.Figure

      Generates the Scatter plot


   .. py:method:: _generate_hover_template(self, df: pandas.DataFrame, dims: int) -> Tuple[Optional[pandas.DataFrame], Optional[str]]

      Generating hover template



