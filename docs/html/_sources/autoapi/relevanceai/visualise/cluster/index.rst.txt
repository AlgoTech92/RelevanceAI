:py:mod:`relevanceai.visualise.cluster`
=======================================

.. py:module:: relevanceai.visualise.cluster


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   relevanceai.visualise.cluster.ClusterBase
   relevanceai.visualise.cluster.CentroidCluster
   relevanceai.visualise.cluster.DensityCluster
   relevanceai.visualise.cluster.KMeans
   relevanceai.visualise.cluster.KMedoids
   relevanceai.visualise.cluster.HDBSCAN



Functions
~~~~~~~~~

.. autoapisummary::

   relevanceai.visualise.cluster._choose_k
   relevanceai.visualise.cluster.cluster



.. py:class:: ClusterBase

   Bases: :py:obj:`relevanceai.logger.LoguruLogger`

   Using verbose loguru as base logger for now

   .. py:method:: __call__(self, *args, **kwargs)


   .. py:method:: fit_transform(self, vectors: numpy.ndarray, cluster_args: Dict[Any, Any]) -> numpy.ndarray
      :abstractmethod:



.. py:class:: CentroidCluster

   Bases: :py:obj:`ClusterBase`

   Using verbose loguru as base logger for now

   .. py:method:: __call__(self, *args, **kwargs)


   .. py:method:: fit_transform(self, vectors: numpy.ndarray, cluster_args: Dict[Any, Any], k: Union[None, int] = None) -> numpy.ndarray
      :abstractmethod:



.. py:class:: DensityCluster

   Bases: :py:obj:`ClusterBase`

   Using verbose loguru as base logger for now

   .. py:method:: __call__(self, *args, **kwargs)


   .. py:method:: fit_transform(self, vectors: numpy.ndarray, cluster_args: Dict[Any, Any], min_cluster_size: Union[None, int] = None) -> numpy.ndarray
      :abstractmethod:



.. py:class:: KMeans

   Bases: :py:obj:`CentroidCluster`

   Using verbose loguru as base logger for now

   .. py:method:: fit_transform(self, vectors: numpy.ndarray, cluster_args: Optional[Dict[Any, Any]] = CLUSTER_DEFAULT_ARGS['kmeans'], k: Union[None, int] = 10) -> numpy.ndarray



.. py:class:: KMedoids

   Bases: :py:obj:`CentroidCluster`

   Using verbose loguru as base logger for now

   .. py:method:: fit_transform(self, vectors: numpy.ndarray, cluster_args: Optional[Dict[Any, Any]] = CLUSTER_DEFAULT_ARGS['kmedoids'], k: Union[None, int] = 10) -> numpy.ndarray



.. py:class:: HDBSCAN

   Bases: :py:obj:`DensityCluster`

   Using verbose loguru as base logger for now

   .. py:method:: fit_transform(self, vectors: numpy.ndarray, cluster_args: Optional[Dict[Any, Any]] = CLUSTER_DEFAULT_ARGS['hdbscan'], min_cluster_size: Union[None, int] = 10) -> numpy.ndarray



.. py:function:: _choose_k(vectors: numpy.ndarray)

   "
   Choose k clusters


.. py:function:: cluster(vectors: numpy.ndarray, cluster: Union[relevanceai.visualise.constants.CLUSTER, ClusterBase], cluster_args: Union[None, dict], k: Union[None, int] = None) -> numpy.ndarray

   Cluster vectors


